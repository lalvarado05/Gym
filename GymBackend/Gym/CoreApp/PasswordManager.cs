using System.Security.Cryptography;
using System.Text;
using DataAccess.CRUD;
using DTOs;

namespace CoreApp;

public class PasswordManager
{
    public void Create(Password password)
    {
        var pCrud = new PasswordCrudFactory();

        pCrud.Create(password);
    }

    public async void AutoGeneratedPassword(Password password)
    {
        var pCrud = new PasswordCrudFactory();
        var uCrud = new UserCrudFactory();
        var genPassword = GeneratePassword(8);
        password.PasswordContent = ComputeMD5Hash(genPassword);
        int id = password.UserId;
        var email = uCrud.RetrieveById<User>(id).Email;
        var emailSender = new SendGridEmail();
        await emailSender.SendEmailAsync(email, genPassword);
        pCrud.Create(password);
    }

    public void Update(Password password)
    {
        var pCrud = new PasswordCrudFactory();
        pCrud.Update(password);
    }

    public void Delete(Password password)
    {
        var pCrud = new PasswordCrudFactory();
        pCrud.Delete(password);
    }

    public List<Password> RetrieveAll()
    {
        var pCrud = new PasswordCrudFactory();
        return pCrud.RetrieveAll<Password>();
    }

    public List<Password> RetrievePasswordsById(int id)
    {
        var pCrud = new PasswordCrudFactory();
        return pCrud.RetrievePasswordsById(id);
    }

    internal bool isValidPassword(string password)
    {
        throw new NotImplementedException();
    }

    public static string GeneratePassword(int length)
    {
        if (length < 8) throw new ArgumentException("La longitud de la contraseña debe ser al menos 8 caracteres.");

        var letters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
        var digits = "0123456789";
        var symbols = "!@#$%&*?";

        var random = new Random();
        var password = new StringBuilder(length);

        // Ensure at least one letter, digit, and symbol
        password.Append(letters[random.Next(letters.Length)]);
        password.Append(digits[random.Next(digits.Length)]);
        password.Append(symbols[random.Next(symbols.Length)]);

        // Fill the rest of the password length with random characters from all sets
        var allCharacters = letters + digits + symbols;
        for (var i = 3; i < length; i++) password.Append(allCharacters[random.Next(allCharacters.Length)]);

        // Shuffle the result to ensure randomness
        var array = password.ToString().ToCharArray();
        for (var i = array.Length - 1; i > 0; i--)
        {
            var j = random.Next(i + 1);
            var temp = array[i];
            array[i] = array[j];
            array[j] = temp;
        }

        return new string(array);
    }

    public string ComputeMD5Hash(string password)
    {
        // Create an instance of the MD5CryptoServiceProvider
        using (var md5 = MD5.Create())
        {
            // Compute the hash from the input string
            var hashBytes = md5.ComputeHash(Encoding.UTF8.GetBytes(password));

            // Convert the byte array to a hexadecimal string
            var sb = new StringBuilder();
            for (var i = 0; i < hashBytes.Length; i++) sb.Append(hashBytes[i].ToString("X2"));

            return sb.ToString();
        }
    }

    // Aquí irían las validaciones

    #region Validations

    #endregion
}