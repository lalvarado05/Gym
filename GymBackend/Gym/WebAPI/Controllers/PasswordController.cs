using CoreApp;
using DTOs;
using Microsoft.AspNetCore.Mvc;

namespace WebAPI.Controllers;

[Route("api/[controller]")]
[ApiController]
public class PasswordController : ControllerBase
{
    #region PUT

    [HttpPut]
    [Route("Update")]
    public ActionResult Update(Password password)
    {
        try
        {
            var pm = new PasswordManager();
            pm.Update(password);
            return Ok(password);
        }
        catch (Exception ex)
        {
            return StatusCode(500, ex.Message);
        }
    }

    #endregion

    #region DELETE

    [HttpDelete]
    [Route("Delete")]
    public ActionResult Delete(Password password)
    {
        try
        {
            var pm = new PasswordManager();
            pm.Delete(password);
            return Ok(password);
        }
        catch (Exception ex)
        {
            return StatusCode(500, ex.Message);
        }
    }

    #endregion

    // CREATE --> POST
    // RETRIEVE --> GET
    // UPDATE --> PUT
    // DELETE --> DELETE

    #region POSTS

    [HttpPost]
    [Route("Create")]
    public ActionResult Create(Password password)
    {
        try
        {
            var pm = new PasswordManager();
            pm.Create(password);
            return Ok(password);
        }
        catch (Exception ex)
        {
            return StatusCode(500, ex.Message);
        }
    }

    [HttpPost]
    [Route("AutoGeneratedPassword")]
    public ActionResult AutoGeneratedPassword(Password password)
    {
        try
        {
            var pm = new PasswordManager();
            pm.AutoGeneratedPassword(password);
            return Ok(password);
        }
        catch (Exception ex)
        {
            return StatusCode(500, ex.Message);
        }
    }

    #endregion

    #region GETS

    [HttpGet]
    [Route("RetrieveAll")]
    public ActionResult RetrieveAll()
    {
        try
        {
            var pm = new PasswordManager();
            return Ok(pm.RetrieveAll());
        }
        catch (Exception ex)
        {
            return StatusCode(500, ex.Message);
        }
    }

    [HttpGet]
    [Route("RetrievePasswordsById")]
    public ActionResult RetrievePasswordsById(int id)
    {
        try
        {
            var pm = new PasswordManager();
            return Ok(pm.RetrievePasswordsById(id));
        }
        catch (Exception ex)
        {
            return StatusCode(500, ex.Message);
        }
    }

    #endregion
}